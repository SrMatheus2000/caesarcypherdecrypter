{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["shiftUp","s","k","split","map","c","match","code","charCodeAt","shift","String","fromCharCode","join","swap","chars","i","j","tmp","App","useState","textoCifrado","setTextoCifrado","dicionario","setDicionario","dicCesar","setDicCesar","possibilidades","setPossibilidades","maisProvaveis","setMaisProvaveis","input","contador","alfabetos","length","push","gerarAlfabetos","mono","setMono","Grid","container","spacing","style","width","height","display","justifyContent","textAlign","item","xs","component","Paper","Typography","variant","Box","key","md","Button","color","fullWidth","onClick","document","getElementById","click","viewBox","d","fill","type","id","onChange","e","reader","FileReader","readAsBinaryString","target","files","onload","palavras","result","palavrasFiltradas","element","search","hidden","TextField","label","margin","value","alternativas","igualDic","texto","trim","disabled","alfabetoReal","alfabeto","temp","letraTexto","palavra","possibilidade","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fe6ba131.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Grid, Typography, Button, Paper, Box, TextField } from '@material-ui/core';\nimport './App.css';\n\nfunction shiftUp(s, k) {\n  let n = 26;\n  if (k < 0) return shiftUp(s, k + n);\n  return s.split('')\n    .map((c) => {\n      if (c.match(/[a-z]/i)) {\n        let code = c.charCodeAt();\n        let shift = code >= 65 && code <= 90 ? 65 : code >= 97 && code <= 122 ? 97 : 0;\n        return String.fromCharCode(((code - shift + k) % n) + shift);\n      }\n      return c;\n    }).join('');\n}\n\nfunction gerarAlfabetos(input) {\n  let contador = [],\n    alfabetos = [],\n    chars = input.split(''),\n    length = chars.length,\n    i;\n  for (i = 0; i < length; i++) contador[i] = 0;\n  alfabetos.push(input);\n  i = 0;\n  while (i < length) {\n    if (contador[i] < i) {\n      swap(chars, i % 2 === 1 ? contador[i] : 0, i);\n      contador[i]++;\n      i = 0;\n      alfabetos.push(chars.join(''));\n    } else {\n      contador[i] = 0;\n      i++;\n    }\n  }\n  return alfabetos;\n}\n\nfunction swap(chars, i, j) {\n  let tmp = chars[i];\n  chars[i] = chars[j];\n  chars[j] = tmp;\n}\n\nfunction App() {\n\n  const [textoCifrado, setTextoCifrado] = useState('')\n  const [dicionario, setDicionario] = useState([])\n  const [dicCesar, setDicCesar] = useState([])\n  const [possibilidades, setPossibilidades] = useState([])\n  const [maisProvaveis, setMaisProvaveis] = useState([])\n  const [alfabetos] = useState(gerarAlfabetos(\"cleopatr\"))\n  const [mono, setMono] = useState([])\n\n  function lerDicionario(e) {\n    let reader = new FileReader()\n    reader.readAsBinaryString(e.target.files[0])\n    reader.onload = (e) => {\n      const palavras = e.target.result.split('\\n')\n      let palavrasFiltradas = []\n      for (let i = 0; i < palavras.length; i++) {\n        const element = palavras[i];\n        if (element.search(/([bdfghijkmnqsuvwxyz])/g) === -1) palavrasFiltradas.push(element)\n      }\n      setDicionario(palavrasFiltradas);\n      setDicCesar(e.target.result.split('\\n'))\n    }\n  }\n\n  function lerPalavra(e) {\n    let reader = new FileReader()\n    reader.readAsBinaryString(e.target.files[0])\n    reader.onload = (e) => {\n      setTextoCifrado(e.target.result)\n    }\n  }\n\n  function decriptarCesar() {\n    let alternativas = [],\n      igualDic = []\n    for (let i = 0; i < 26; i++) {\n      const texto = shiftUp(textoCifrado, i)\n      alternativas.push(texto)\n      for (let j = 0; j < dicCesar.length; j++) {\n        const element = dicCesar[j].trim()\n        if (texto === element) igualDic.push(texto)\n      }\n    }\n    setPossibilidades(alternativas)\n    setMaisProvaveis(igualDic)\n  }\n\n  function decriptarMono() {\n    const alfabetoReal = ['c', 'l', 'e', 'o', 'p', 'a', 't', 'r']\n    let igualDic = [],\n      possibilidades = []\n    for (let i = 0; i < alfabetos.length; i++) {\n      const alfabeto = alfabetos[i].split('');\n      let temp = []\n      for (let j = 0; j < textoCifrado.length; j++) {\n        const letraTexto = textoCifrado.split('')[j];\n        for (let k = 0; k < alfabeto.length; k++) {\n          const letraAlfa = alfabeto[k];\n          if (letraTexto === letraAlfa) temp.push(alfabetoReal[k])\n        }\n      }\n      possibilidades.push({ palavra: temp.join(''), alfabeto })\n    }\n\n    for (let i = 0; i < dicionario.length; i++) {\n      const element = dicionario[i].trim()\n      if (textoCifrado.length === element.length) {\n        for (let j = 0; j < possibilidades.length; j++) {\n          const possibilidade = possibilidades[j];\n          if (possibilidade.palavra === element) {\n            igualDic.push(possibilidade)\n            break\n          }\n        }\n      }\n    }\n    setMono(igualDic)\n  }\n\n  return (\n    <Grid container spacing={2} style={{ width: '100%', height: '100vh', display: 'flex', justifyContent: 'center', textAlign: 'center' }} >\n      <Grid item xs={4} component={Paper}>\n        {possibilidades.length > 0 && (\n          <Grid container>\n            <Grid item xs={12}>\n              <Typography variant={\"h4\"}>Resultado cifra de cesar</Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant={\"body1\"}>Palavras encontradas no dicionario</Typography>\n              {maisProvaveis.map(item => (\n                <Box key={item} display='block'>{item}</Box>\n              ))}\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant={\"body1\"}>Outras possibilidades</Typography>\n              {possibilidades.map(item => (\n                <Box key={item} display='block'>{item}</Box>\n              ))}\n            </Grid>\n          </Grid>\n        )}\n      </Grid>\n      <Grid item xs={4} component={Paper}>\n        <Grid container >\n          <Grid item xs={12}>\n            <Typography variant={\"h2\"}>Decriptografador</Typography>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Button color='primary' fullWidth variant='contained' onClick={() => document.getElementById('dicionario').click()}>\n              {dicCesar.length > 0 && (\n                <svg height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\">\n                  <path d=\"M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z\" fill='limegreen' />\n                </svg>\n              )}\n              &nbsp;\n              Importar Dicionário\n            </Button>\n            <input type='file' id='dicionario' onChange={lerDicionario} hidden />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Button color='primary' fullWidth variant='contained' onClick={() => document.getElementById('palavraCifrada').click()}>\n              {textoCifrado.length > 0 && (\n                <svg height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\" >\n                  <path d=\"M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z\" fill='limegreen' />\n                </svg>\n              )}\n              &nbsp;\n              Importar Palavra Cifrada\n            </Button>\n            <input type='file' id='palavraCifrada' onChange={lerPalavra} hidden />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField fullWidth label='Palavra Cifrada' variant='outlined' margin='dense' value={textoCifrado} onChange={e => setTextoCifrado(e.target.value)} />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Button color='primary' fullWidth variant='contained' onClick={decriptarCesar} disabled={dicCesar.length === 0 || textoCifrado.length === 0}>Decriptar Cesar</Button>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Button color='secondary' fullWidth variant='contained' onClick={decriptarMono} disabled={dicCesar.length === 0 || textoCifrado.length === 0}>Decriptar Mono</Button>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={4} component={Paper}>\n        {mono.length > 0 && (\n          <Grid container >\n            <Grid item xs={12}>\n              <Typography variant={\"h4\"}>Resultado cifra monoalfabetica</Typography>\n            </Grid>\n            <Grid item xs={6} >\n              <Typography variant={\"body1\"}>Palavra encontrada</Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant={\"body1\"}>Alfabeto utilizado</Typography>\n            </Grid>\n            <Grid item xs={6} >\n              {mono.map(item => (\n                <Box key={item.palavra} display='block'>{item.palavra}</Box>\n              ))}\n            </Grid>\n            <Grid item xs={6} >\n              {mono.map(item => (\n                <Box key={item.alfabeto} display='block'>{item.alfabeto}</Box>\n              ))}\n            </Grid>\n          </Grid>\n        )}\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}